# -*- coding: utf-8 -*-
"""web_series_prediction_content_based.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SUOGLJY13LacLzZllzT86_uydqhs1FRd
"""

# Content-based
import numpy as np 
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

###### helper functions. Use them when needed #######
def get_title_from_index(index):
	return df[df.index == index]["title"].values[0]

def get_index_from_title(title):
	return df[df.title == title]["index"].values[0]
##################################################

# Step 1: Read CSV File
df = pd.read_csv("tv_shows_dataset.csv")
# print(df.columns)
#df

print(df.columns)

# Step 2: Select Features
features = ['Genre']
#features

# df.isnull().sum()

for feature in features:
	df[feature] = df[feature].fillna('')

# Step 3: Create a column in DF which combines all selected features
def combine_features(row):
    try:
        return row['Genre']
    except:
        print("Error: ", row)

df["combined_features"] = df.apply(combine_features,axis=1)
# print("Combined Features:\n", df["combined_features"].head())

# Step 4: Create count matrix from this new combined column
cv = CountVectorizer()
count_matrix = cv.fit_transform(df["combined_features"])
# print(count_matrix)

# Step 5: Compute the Cosine Similarity based on the count_matrix 
# gives similarity scores
cosine_sim = cosine_similarity(count_matrix)
# print(cosine_sim)

# i want to list the movies in descending order of their similarity scores
# 1.00 to 0.00
# we want convert list of elements into a list of ttuples
tvshow_user_likes = "Breaking Bad"
movie_index = get_index_from_title(tvshow_user_likes)
similar_movies = list(enumerate(cosine_sim[movie_index]))

# Step 7: Get a list of similar movies in descending order of similarity score
sorted_similar_movies = sorted(similar_movies, key=lambda x:x[1], reverse=True)[0:10]

# Step 8: Print titles of first 50 movies based on similarity score via genres
i = 0
# print("People who watched "+tvshow_user_likes+" also liked:\n")
# for element in sorted_similar_movies:
#     print(get_title_from_index(element[0]))
#     i = i + 1
#     if i > 10:
#         break

"""by IMDB"""

df["IMDB Rating"].unique()

# step 7 repeated but this time with 'sorted_similar_movies' = genre and IMDB
sort_by_IMDB = sorted(sorted_similar_movies,key=lambda x:df["IMDB Rating"][x[0]],reverse=True)
print(sort_by_IMDB)



# Step 8: Print titles of first 50 movies based on similarity score via genres
# and again by IMDB
i=0
print("Suggesting top 5 movies in order of genres and IMDB rating:\n")
for element in sort_by_IMDB:
    print(get_title_from_index(element[0]))
    i=i+1
    if i>10:
        break

import pickle
pickle.dump(df,open('tv_shows.pkl','wb'))
pickle.dump(df.to_dict(),open('tv_shows_dict.pkl','wb'))
# similarity on 1:22
# pickle.dump(cosine_sim,open('cosine_similarity.pkl','wb'))
# caution: the above .pkl will be a 1.2 gb file.
